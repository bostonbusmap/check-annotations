diff -r 168e6b411f45 as_string.py
--- a/as_string.py	Thu Apr 25 13:33:10 2013 +0200
+++ b/as_string.py	Mon Apr 29 23:33:51 2013 -0400
@@ -256,8 +256,9 @@
         """return an astng.Function node as string"""
         decorate = node.decorators and node.decorators.accept(self)  or ''
         docs = node.doc and '\n%s"""%s"""' % (INDENT, node.doc) or ''
-        return '\n%sdef %s(%s):%s\n%s' % (decorate, node.name, node.args.accept(self),
-                                        docs, self._stmt_list(node.body))
+        returns = node.returns and ' -> %s' % node.returns.accept(self) or ''
+        return '\n%sdef %s(%s)%s:%s\n%s' % (decorate, node.name, node.args.accept(self),
+                                            returns, docs, self._stmt_list(node.body))
 
     def visit_genexpr(self, node):
         """return an astng.GenExpr node as string"""
@@ -427,6 +428,9 @@
 class AsStringVisitor3k(AsStringVisitor):
     """AsStringVisitor3k overwrites some AsStringVisitor methods"""
 
+    def visit_arg(self, node):
+        return node.format_args()
+
     def visit_excepthandler(self, node):
         if node.type:
             if node.name:
diff -r 168e6b411f45 node_classes.py
--- a/node_classes.py	Thu Apr 25 13:33:10 2013 +0200
+++ b/node_classes.py	Mon Apr 29 23:33:51 2013 -0400
@@ -251,6 +251,23 @@
 
 #####################   node classes   ########################################
 
+class Arg(NodeNG, AssignTypeMixin):
+    """class representing a python3k argument"""
+    _astng_fields = ('name', 'annotation')
+    name = None
+    annotation = None
+
+    def __init__(self, name=None, annotation=None):
+        self.name = name
+        self.annotation = annotation
+
+    def format_args(self):
+        if self.annotation:
+            return self.name.name + " : " + self.annotation.as_string()
+        else:
+            return self.name.name
+
+
 class Arguments(NodeNG, AssignTypeMixin):
     """class representing an Arguments node"""
     _astng_fields = ('args', 'defaults')
@@ -304,6 +321,7 @@
 
 def _find_arg(argname, args, rec=False):
     for i, arg in enumerate(args):
+        print(arg)
         if isinstance(arg, Tuple):
             if rec:
                 found = _find_arg(argname, arg.elts)
@@ -323,6 +341,8 @@
     for i, arg in enumerate(args):
         if isinstance(arg, Tuple):
             values.append('(%s)' % _format_args(arg.elts))
+        elif isinstance(arg, Arg):
+            values.append(arg.format_args())
         else:
             values.append(arg.name)
             if defaults is not None and i >= default_offset:
diff -r 168e6b411f45 nodes.py
--- a/nodes.py	Thu Apr 25 13:33:10 2013 +0200
+++ b/nodes.py	Mon Apr 29 23:33:51 2013 -0400
@@ -37,7 +37,7 @@
 
 __docformat__ = "restructuredtext en"
 
-from logilab.astng.node_classes import Arguments, AssAttr, Assert, Assign, \
+from logilab.astng.node_classes import Arguments, Arg, AssAttr, Assert, Assign, \
     AssName, AugAssign, Backquote, BinOp, BoolOp, Break, CallFunc, Compare, \
     Comprehension, Const, Continue, Decorators, DelAttr, DelName, Delete, \
     Dict, Discard, Ellipsis, EmptyNode, ExceptHandler, Exec, ExtSlice, For, \
@@ -49,7 +49,7 @@
     ListComp, SetComp, Function, Class
 
 ALL_NODE_CLASSES = (
-    Arguments, AssAttr, Assert, Assign, AssName, AugAssign,
+    Arguments, Arg, AssAttr, Assert, Assign, AssName, AugAssign,
     Backquote, BinOp, BoolOp, Break,
     CallFunc, Class, Compare, Comprehension, Const, Continue,
     Decorators, DelAttr, DelName, Delete,
diff -r 168e6b411f45 protocols.py
--- a/protocols.py	Thu Apr 25 13:33:10 2013 +0200
+++ b/protocols.py	Mon Apr 29 23:33:51 2013 -0400
@@ -214,6 +214,11 @@
 nodes.AssName.assigned_stmts = assend_assigned_stmts
 nodes.AssAttr.assigned_stmts = assend_assigned_stmts
 
+def arg_assigned_stmts(self, node, context, asspath=None):
+    # TODO: where do 'node' and 'self' fit in?
+    return self.parent.assigned_stmts(self, context=context)
+nodes.Arg.assigned_stmts = arg_assigned_stmts
+
 
 def _arguments_infer_argname(self, name, context):
     # arguments information may be missing, in which case we can't do anything
diff -r 168e6b411f45 rebuilder.py
--- a/rebuilder.py	Thu Apr 25 13:33:10 2013 +0200
+++ b/rebuilder.py	Mon Apr 29 23:33:51 2013 -0400
@@ -30,6 +30,8 @@
     UAdd, USub, Not, Invert,
     # comparison operators
     Eq, Gt, GtE, In, Is, IsNot, Lt, LtE, NotEq, NotIn,
+    # name
+    Name
     )
 
 from logilab.astng import nodes as new
@@ -812,9 +814,52 @@
 
     def visit_arg(self, node, parent):
         """visit a arg node by returning a fresh AssName instance"""
-        # the <arg> node is coming from py>=3.0, but we use AssName in py2.x
-        # XXX or we should instead introduce a Arg node in astng ?
-        return self.visit_assname(node, parent, node.arg)
+        newnode = new.Arg()
+        _set_infos(node, newnode, parent)
+        if node.annotation:
+            old_asscontext = self.asscontext
+            self.asscontext = None
+            newnode.annotation = self.visit(node.annotation, newnode)
+            self.asscontext = old_asscontext
+        if node.arg:
+            newnode.name = self.visit_assname(node, newnode, node.arg)
+        newnode.set_line_info(newnode.last_child())
+        return newnode
+
+    def visit_function(self, node, parent):
+        """visit an Function node to become astng"""
+        self._global_names.append({})
+        newnode = new.Function(node.name, None)
+        _lineno_parent(node, newnode, parent)
+        _init_set_doc(node, newnode)
+        newnode.args = self.visit(node.args, newnode)
+        newnode.body = [self.visit(child, newnode) for child in node.body]
+        if 'decorators' in node._fields: # py < 2.6
+            attr = 'decorators'
+        else:
+            attr = 'decorator_list'
+        decorators = getattr(node, attr)
+        if decorators:
+            newnode.decorators = self.visit_decorators(node, newnode)
+        if node.returns:
+            newnode.returns = self.visit(node.returns, newnode)
+        newnode.set_line_info(newnode.last_child())
+        self._global_names.pop()
+        frame = newnode.parent.frame()
+        if isinstance(frame, new.Class):
+            if newnode.name == '__new__':
+                newnode.type = 'classmethod'
+            else:
+                newnode.type = 'method'
+        if newnode.decorators is not None:
+            for decorator_expr in newnode.decorators.nodes:
+                if isinstance(decorator_expr, new.Name):
+                    if decorator_expr.name in ('classmethod', 'staticmethod'):
+                        newnode.type = decorator_expr.name
+                    elif decorator_expr.name == 'classproperty':
+                        newnode.type = 'classmethod'
+        frame.set_local(newnode.name, newnode)
+        return newnode
 
     def visit_excepthandler(self, node, parent):
         """visit an ExceptHandler node by returning a fresh instance of it"""
diff -r 168e6b411f45 scoped_nodes.py
--- a/scoped_nodes.py	Thu Apr 25 13:33:10 2013 +0200
+++ b/scoped_nodes.py	Mon Apr 29 23:33:51 2013 -0400
@@ -518,7 +518,7 @@
 
 
 class Function(Statement, Lambda):
-    _astng_fields = ('decorators', 'args', 'body')
+    _astng_fields = ('decorators', 'args', 'returns', 'body')
 
     special_attributes = set(('__name__', '__doc__', '__dict__'))
     is_function = True
@@ -535,6 +535,7 @@
         self.doc = doc
         self.extra_decorators = []
         self.instance_attrs = {}
+        self.returns = None
 
     def set_line_info(self, lastchild):
         self.fromlineno = self.lineno
